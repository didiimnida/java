class Thing{
	//final is Java version of constant.  Can't reassign.  
	public final static int LUCKY_NUMBER =22;
	
	//Instance variable:
	public String name;
	//Static variables belong to the class, so only one copy.  
	//Class variable:
	public static String description;
	
	public static int count = 0; 
	
	public int id;
	
	
	//No return type for a constructor. 
	//This will always run whenever make a new object.  
	public Thing(){
		count++;
	}
	
//	public int getCount(){
//		return count;
//	}
	
	//Make a getter!
//	public static int getCount(){
//		System.out.println(count);
//		return count
//	}
	
	//Static method versus instance method:
	//Instance method can access static data b/c objects can access class data.
	public void showName(){
		System.out.println(description + ": " + name);
	}
	
	//Add static to make it a class method.  
	//Static method can access static data. 
	public static void showInfo(){
		System.out.println("Hello");
		//The following is invalid b/c it is a non-static: 
		//System.out.println(name);
	}
}

public class App {

	public static void main(String[] args) {
		
		System.out.println("Before creating objects, " + Thing.count);
		Thing.description = "I am a thing";
		System.out.println(Thing.description);
		Thing.showInfo();
		
		
		Thing thing1 = new Thing();
		Thing thing2 = new Thing();
		
		thing1.name = "Bob";
		thing2.name = "Sue";
		
		System.out.println(thing1.name);
		System.out.println(thing2.name);
		
		thing1.showName();
		thing2.showName();
		
		//Accessing some data via the class.  Static data.  
		System.out.println(Math.PI);
		//PI is a constant.  Can't reassign it.  
		//Let's make our own constant. 
		
		System.out.println(Thing.LUCKY_NUMBER);
		System.out.println("After creating objects, " + Thing.count);
	}
}
